---
- name: install mmdb reader repository
  become: true
  apt_repository:
    repo: ppa:maxmind/ppa

- name: install C library for reading MaxMind DB files
  become: true
  apt:
    update_cache: true
    name:
      - libmaxminddb0
      - libmaxminddb-dev
      - mmdb-bin


- name: copy ngx_http_geoip2_module.so to server
  become: true
  copy:
    src: ngx_http_geoip2_module.so
    dest: /usr/lib/nginx/modules/
    group: root
    owner: root
    mode: 0644
  
- name: edit nginx.conf to load ngx_http_geoip2_module.so
  become: true
  lineinfile:
    path: /etc/nginx/nginx.conf
    line: load_module modules/ngx_http_geoip2_module.so;
    insertbefore: 'events {'

- name: edit nginx.conf to map variables to mmdb data
  become: true
  blockinfile:
    path: /etc/nginx/nginx.conf
    insertbefore: 'sendfile on;'
    block: |
      geoip2 /etc/geolite/GeoLite2-Country.mmdb {
      auto_reload 5m;
      $geoip2_metadata_country_build metadata build_epoch;
      $geoip2_data_country_code country iso_code;
      $geoip2_data_country_name country names en;
      }

      geoip2 /etc/geolite/GeoLite2-City.mmdb {
      $geoip2_data_city_name city names en;
      $geoip2_data_state_code subdivisions 0 iso_code;
      $geoip2_data_state_name subdivisions 0  names en;
      $geoip2_data_latitude location latitude;
      $geoip2_data_longitude location longitude;
      $geoip2_data_accuracy location accuracy_radius;
      }

- name: update nginx.conf file to format log for loki dashboard
  become: true
  replace:
    path: /etc/nginx/nginx.conf
    regexp: 'access_log .+'
    replace: |
      log_format json_analytics escape=json '{'
                        '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                        '"connection": "$connection", ' # connection serial number
                        '"connection_requests": "$connection_requests", ' # number of requests made in connection
                '"pid": "$pid", ' # process pid
                '"request_id": "$request_id", ' # the unique request id
                '"request_length": "$request_length", ' # request length (including headers and body)
                '"remote_addr": "$remote_addr", ' # client IP
                '"remote_user": "$remote_user", ' # client HTTP username
                '"remote_port": "$remote_port", ' # client port
                '"time_local": "$time_local", '
                '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                '"request": "$request", ' # full path no arguments if the request
                '"request_uri": "$request_uri", ' # full path and arguments if the request
                '"args": "$args", ' # args
                '"status": "$status", ' # response status code
                '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                '"http_referer": "$http_referer", ' # HTTP referer
                '"http_user_agent": "$http_user_agent", ' # user agent
                '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                '"http_host": "$http_host", ' # the request Host: header
                '"server_name": "$server_name", ' # the name of the vhost serving the request
                '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                '"scheme": "$scheme", ' # http or https
                '"request_method": "$request_method", ' # request method
                '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                '"gzip_ratio": "$gzip_ratio", '
                '"http_cf_ray": "$http_cf_ray",'
                '"geoip_country_code": "$geoip2_data_country_code",'
                '"geoip_country_name": "$geoip2_data_country_name",'
                '"geoip_city_name": "$geoip2_data_city_name",'
                '"geoip_state_code": "$geoip2_data_state_code",'
                '"geoip_state_name": "$geoip2_data_state_name",'
                '"geoip_latitude": "$geoip2_data_latitude",'
                '"geoip_longitude": "$geoip2_data_longitude",'
                '"geoip_accuracy": "$geoip2_data_accuracy"'
                '}';

       access_log /var/log/nginx/json_access.log json_analytics;
    
- name: create directory for the geolite databases
  become: true
  file:
    state: directory
    path: /etc/geolite
    mode: 0755
    owner: root
    group: root

  
- name: Downloading the latest GeoIP COUNTRY Database and comparing it to checksum
  get_url:
    url: 'https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=L5ge93EmC4ww26Hp&suffix=tar.gz'
    dest: /tmp/
    mode: 0644
    checksum: "{{ geo_country_checksum }}"
  register: return_country_values

- name: set facts return_country_values
  set_fact:
    filename: "{{ return_country_values.dest.split('/')[2] }}"

- name: split return_country_values.dest filename
  set_fact:
    directory_name: "{{ filename.split('.')[0] }}"

- name: make basenmae
  set_fact:     
    file_base: "{{ directory_name.split('_')[0] }}"   
   
- name: Unarchive the file
  unarchive:
    remote_src: yes
    dest: /tmp/
    src: "{{ return_country_values.dest }}"

- name: copy the database to /etc/geolite/
  become: true
  copy:
    remote_src: true
    src: "{{ '/tmp/' + directory_name + '/' + file_base + '.mmdb' }}"
    dest: /etc/geolite/

- name: Downloading the latest GeoIP CITY Database and comparing it to checksum
  get_url:
    url: 'https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=L5ge93EmC4ww26Hp&suffix=tar.gz'
    dest: /tmp/
    mode: 0644
    checksum: "{{ geo_city_checksum }}"
  register: city

- name: set facts return_values
  set_fact:
    cityfile: "{{ city.dest.split('/')[2] }}"

- name: split filename
  set_fact:
    city_directory: "{{ cityfile.split('.')[0] }}"

- name: make basenmae
  set_fact:     
    city_base: "{{ city_directory.split('_')[0] }}"   
   
- name: Unarchive the file
  unarchive:
    remote_src: yes
    dest: /tmp/
    src: "{{ city.dest }}"

- name: copy the database to /etc/geolite/
  become: true
  copy:
    remote_src: true
    src: "{{ '/tmp/' + city_directory + '/' + city_base + '.mmdb' }}"
    dest: /etc/geolite/

- name: Copy GeoIP.conf to server
  become: true
  copy:
    src: GeoIP.conf
    dest: /etc/geolite/

- name: install geoipupdate in cron.weekly
  become: true
  copy:
    src: geoipupdate
    dest: /etc/cron.weekly/
         

             
                            
         
          
          
          
          
